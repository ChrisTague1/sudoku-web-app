{"version":3,"sources":["components/Table/Table.js","components/Button/Button.js","components/Selector/Selector.js","components/Size/Size.js","components/Convert/Convert.js","App.js","reportWebVitals.js","index.js"],"names":["Table","props","square","size","rows","r","cols","c","value","id","Y","Math","floor","X","push","type","className","concat","color","onChange","onInputChange","placeholder","sudoku","onClick","onInputClick","myStyle","display","gridTemplateColumns","height","paddingBottom","style","Button","onSolveButton","onResetButton","Selector","changeSolution","selectSolution","selectorInputChange","Size","for","name","sizeChange","Convert","onConvertClick","Sudoku","runLimit","sudokuToString","arr","map","x","toString","NumInRow","num","row","includes","NumInCol","col","i","NumInBox","StartY","StartX","Solve","solutions","n","totalRecursion","answer","ReportSolution","this","length","App","event","target","isFinite","index","parseInt","split","state","setState","alert","convertToList","numSolutions","isSolved","selectorInput","displaying","updateSudoku","prev","isNaN","componentDidMount","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e70a111.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Table.css';\r\n\r\nconst shade = 'box shade '\r\nconst box = 'box '\r\n\r\nconst Table = (props) => {\r\n  const square = props.size ** 0.5;\r\n  const rows = [];\r\n  for (let r = 0; r < props.size; r++) {\r\n    const cols = [];\r\n    for (let c = 0; c < props.size; c++) {\r\n      const value = r * props.size + c;\r\n      const id = `box_${value}`\r\n      const Y = Math.floor(r / square);\r\n      const X = Math.floor(c / square);\r\n      cols.push(\r\n        <input \r\n          type='text' \r\n          id={id}\r\n          className={(((X + Y) % 2 === 0) ? shade : box).concat(props.color[value])}\r\n          onChange={props.onInputChange}\r\n          placeholder=\"0\"\r\n          value={props.sudoku[value]}\r\n          onClick={props.onInputClick}\r\n        />)\r\n    }\r\n    rows.push(cols);\r\n  }\r\n\r\n  const myStyle = {\r\n    display: \"grid\",\r\n    gridTemplateColumns: `repeat(${props.size}, auto)`,\r\n    height: \"0\",\r\n    paddingBottom: \"100%\"\r\n  }\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className='table'\r\n        style={myStyle}\r\n      >\r\n        {rows}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={props.onSolveButton}\r\n      >\r\n        Solve\r\n      </button>\r\n      <button\r\n        onClick={props.onResetButton}\r\n      >\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './Selector.css';\r\n\r\nconst Selector = (props) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={props.changeSolution}\r\n        id='down'\r\n        className='small'\r\n      >\r\n        &larr;\r\n      </button>\r\n      <button onClick={props.selectSolution}>\r\n        Solution number:\r\n      </button>\r\n      <input \r\n        type=\"text\"\r\n        className='selector'\r\n        onChange={props.selectorInputChange}\r\n        value={props.display}\r\n        placeholder={props.placeholder}\r\n      />\r\n      <button\r\n        onClick={props.changeSolution}\r\n        id='up'\r\n        className='small'\r\n      >\r\n        &rarr;\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Selector;","import React from 'react';\r\n\r\nconst Size = (props) => {\r\n  return (\r\n    <div>\r\n      <label for=\"size\" >Select Sudoku Size: </label>\r\n      <select\r\n        name=\"size\"\r\n        id=\"size\"\r\n        onChange={props.sizeChange}\r\n      >\r\n        <option value=\"4\">4</option>\r\n        <option value=\"9\">9</option>\r\n        <option value=\"16\">16</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Size;","import React from 'react';\r\n\r\nconst Convert = (props) => {\r\n  return (\r\n    <div>\r\n      <button\r\n        onClick={props.onConvertClick}\r\n      >Turn Blue</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Convert;","import React, { Component } from 'react';\nimport Table from './components/Table/Table';\nimport Button from './components/Button/Button';\nimport Selector from './components/Selector/Selector';\nimport Size from './components/Size/Size';\nimport Convert from './components/Convert/Convert';\nimport './App.css';\n\nclass Sudoku {\n  constructor(sudoku, runLimit) {\n    this.sudoku = sudoku;\n    this.runLimit = runLimit;\n    this.size = this.sudoku.length;\n    this.square = this.size ** 0.5;\n    this.solutions = 0;\n    this.answer = []\n  }\n\n  sudokuToString = () => {\n    const arr = [];\n    for (let r = 0; r < this.size; r++) {\n      arr.push(...this.sudoku[r])\n    }\n    return arr.map(x => x.toString());\n  }\n\n  NumInRow = (num, row) => this.sudoku[row].includes(num)\n  \n  NumInCol = (num, col) => {\n    for (let i = 0; i < this.size; i++) {\n      if (this.sudoku[i][col] === num) return true;\n    }\n    return false;\n  }\n\n  NumInBox = (num, row, col) => {\n    const StartY = Math.floor(row / this.square) * this.square;\n    const StartX = Math.floor(col / this.square) * this.square;\n    for (let r = StartY; r < StartY + this.square; r++) {\n      for (let c = StartX; c < StartX + this.square; c++) {\n        if (this.sudoku[r][c] === num) return true;\n      }\n    }\n    return false;\n  }\n\n  Solve = () => {\n    if (this.solutions < this.runLimit) {\n      for (let r = 0; r < this.size; r++) {\n        for (let c = 0; c < this.size; c++) {\n          if (this.sudoku[r][c] === 0 || this.sudoku[r][c] > this.size) {\n            for (let n = 1; n <= this.size; n++) {\n              if (!this.NumInBox(n, r, c) && !this.NumInRow(n, r) && !this.NumInCol(n, c)) {\n                this.sudoku[r][c] = n;\n                ++this.totalRecursion;\n                this.Solve();\n                this.sudoku[r][c] = 0;\n              }\n            }\n            return;\n          }\n        }\n      }\n      ++this.solutions;\n      this.answer.push(this.sudokuToString());\n    }\n  }\n\n  ReportSolution = () => {\n    this.Solve();\n    return this.answer;\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      size: 4,\n      sudoku: [],\n      runLimit: 10000,\n      displaying: 0,\n      solutions: [],\n      selectorInput: \"\",\n      numSolutions: 0,\n      isSolved: false,\n      color: []\n    }\n  }\n\n  componentDidMount() {\n    const sudoku = [];\n    const color = [];\n    for (let i = 0; i < this.state.size ** 2; i++) {\n      sudoku.push(\"\");\n      color.push(\"isGreen\");\n    }\n    this.setState({\n      sudoku,\n      color\n    })\n  }\n\n\n  onInputChange = (event) => {\n    let { id, value } = event.target;\n    if (isFinite(value) && value !== \" \") {\n      const index = parseInt(id.split(\"_\")[1]);\n      let { sudoku, color } = this.state;\n      sudoku[index] = value;\n      color[index] = \"isBlue\"\n      this.setState({ sudoku, color })\n    } else {\n      alert(`${value} is not a number`);\n      this.onInputClick(event);\n    }\n  }\n\n  onInputClick = (event) => {\n    const index = parseInt(event.target.id.split(\"_\")[1]);\n    let { sudoku, color } = this.state;\n    sudoku[index] = \"\";\n    color[index] = \"isGreen\";\n    this.setState({ sudoku, color });\n  }\n\n  onSolveButton = () => {\n    const solver = new Sudoku(this.convertToList(), this.state.runLimit);\n    const solutions = solver.ReportSolution();\n    if (solutions.length !== 0) {\n      this.setState({\n        solutions: solutions,\n        numSolutions: solutions.length - 1,\n        isSolved: true,\n        selectorInput: \"\",\n        displaying: 0\n      },\n        () => {\n          this.updateSudoku();\n        }\n      )\n    } else {\n      alert(\"This sudoku cannot be solved\");\n      this.onResetButton();\n    }\n  }\n\n  onResetButton = () => {\n    const sudoku = [];\n    const color = [];\n    for (let i = 0; i < this.state.size ** 2; i++) {\n      sudoku.push(\"\");\n      color.push(\"isGreen\");\n    }\n    this.setState({\n      sudoku,\n      displaying: 0,\n      solutions: [],\n      selectorInput: \"\",\n      numSolutions: 0,\n      color\n    })\n  }\n\n  convertToList = () => {\n    const sudoku = [];\n    for (let r = 0; r < this.state.size; r++) {\n      const row = [];\n      for (let c = 0; c < this.state.size; c++) {\n        if (this.state.sudoku[r * this.state.size + c] !== \"\") {\n          row.push(parseInt(this.state.sudoku[r * this.state.size + c]))\n        } else row.push(0);\n      }\n      sudoku.push(row);\n    }\n    return sudoku;\n  }\n\n  changeSolution = (event) => {\n    if (event.target.id ==='up') {\n      if (this.state.displaying < this.state.solutions.length - 1) {\n        this.setState((prev, props) => ({\n          displaying: ++prev.displaying\n        }))\n        this.updateSudoku();\n      }\n    } else if (this.state.displaying > 0) {\n      this.setState((prev, props) => ({\n        displaying: --prev.displaying\n      }))\n      this.updateSudoku();\n    }\n  }\n\n  updateSudoku = () => {\n    this.setState((prev, props) => ({\n      sudoku: prev.solutions[prev.displaying]\n    }))\n  }\n\n  selectorInputChange = (event) => {\n    this.setState({\n      selectorInput: event.target.value\n    })\n  }\n\n  selectSolution = () => {\n    let { selectorInput, numSolutions, isSolved } = this.state;\n    if (selectorInput !== \"\" && isSolved) {\n      if (!isNaN(selectorInput)) {\n        selectorInput = parseInt(selectorInput);\n        if (0 > selectorInput) selectorInput = 0;\n        if (selectorInput > numSolutions) selectorInput = numSolutions;\n        this.setState({\n          displaying: selectorInput,\n          selectorInput: \"\"\n        });\n        this.updateSudoku();\n      } else {\n        alert(\"Enter a number\");\n        this.setState({\n          selectorInput: \"\"\n        })\n      }\n    }\n  }\n\n  sizeChange = (event) => {\n    this.setState({\n      size: parseInt(event.target.value),\n      sudoku: []\n    },\n      () => {\n        this.onResetButton();\n        this.componentDidMount();\n      }\n    )\n  }\n\n  onConvertClick = () => {\n    let color = this.state.color;\n    for (let i = 0; i < this.state.size ** 2; i++) {\n      if (this.state.sudoku[i] !== \"\") {\n        color[i] = \"isBlue\"\n        this.setState({ color })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Table \n          size={this.state.size}\n          onInputChange={this.onInputChange}\n          onInputClick={this.onInputClick}\n          sudoku={this.state.sudoku}\n          color={this.state.color}\n        />\n        <Button \n          onSolveButton={this.onSolveButton}\n          onResetButton={this.onResetButton}\n        />\n        <Selector \n          changeSolution={this.changeSolution}\n          selectSolution={this.selectSolution}\n          selectorInputChange={this.selectorInputChange}\n          display={this.state.selectorInput}\n          placeholder={this.state.displaying}\n        />\n        <Size sizeChange={this.sizeChange}/>\n        <Convert onConvertClick={this.onConvertClick}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}